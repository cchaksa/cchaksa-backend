name: Deploy to Prod EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Build jar with Gradle
        run: ./gradlew clean build

      - name: Rename jar to app.jar
        run: |
          mkdir -p deploy
          cp build/libs/*.jar deploy/app.jar

      - name: Copy app.jar to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.PROD_EC2_USER }}
          key: ${{ secrets.PROD_EC2_KEY }}
          source: "deploy/app.jar"
          target: "/home/ubuntu/app"
          strip_components: 1

      - name: Restart Spring Boot app on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.PROD_EC2_USER }}
          key: ${{ secrets.PROD_EC2_KEY }}
          script: |
            bash -c '
              source /home/ubuntu/env.sh
              echo "SPRING_PROFILES_ACTIVE=$SPRING_PROFILES_ACTIVE"
              cd /home/ubuntu/app

              # 기존 프로세스 종료
              PID=$(pgrep -f "app.jar")
              if [ -n "$PID" ]; then
                echo "Killing existing process: $PID"
                kill -9 $PID
              fi

              # 새로운 프로세스 실행
              nohup java -jar app.jar --spring.profiles.active=$SPRING_PROFILES_ACTIVE > app.log 2>&1 &
            '